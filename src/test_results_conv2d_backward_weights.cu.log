    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
     Running `/Users/thomas/Developer/building/cudapple/target/debug/cudapple -i examples/conv2d_backward_weights.cu -d output --run -v`

[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m
[1;33m   CUDApple v1.0.0[0m
[0m   Running CUDA code directly on your Mac chip
[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m


[1;35m=== CUDA Source Analysis ===[0m
[1;32mINFO [0m ✓ Successfully parsed CUDA program with 1 kernels
[1;32mINFO [0m 📦 Found kernel: conv2d_backward_weights
[1;32mINFO [0m    ├─ Parameters: 15
[1;32mINFO [0m 🎯 Selected kernel: conv2d_backward_weights

[1;35m=== Metal Translation ===[0m
[1;32mINFO [0m ✓ Generated Metal shader code
[1;32mINFO [0m    ├─ Dimensions: 2
[1;32mINFO [0m    ├─ Grid size: (63, 63, 1)
[1;32mINFO [0m    └─ Thread group size: (16, 16, 1)

[1;35m=== File Generation ===[0m
[1;32mINFO [0m ✓ Written Metal shader: "output/kernel.metal"
[1;32mINFO [0m ✓ Written Swift files:
[1;32mINFO [0m    ├─ "output/MetalKernelRunner.swift"
[1;32mINFO [0m    └─ "output/main.swift"

[1;35m=== Kernel Execution ===[0m
[1;32mINFO [0m 🚀 Compiling and running the kernel...
[1;32mINFO [0m ✓ Successfully compiled Swift code


=== CUDApple Kernel Execution ===
• Emulating CUDA kernel: conv2d_backward_weights

=== Input Values ===

Input dimensions: 32 x 32 x 3
Kernel dimensions: 3 x 3
Output dimensions: 30 x 30 x 3
input[0] = -0.3366891
grad_output[0] = 0.0
grad_weights[0] = -0.6251333
input[1] = 0.3000214
grad_output[1] = 0.0
grad_weights[1] = 0.9398922
input[2] = -0.7082416
grad_output[2] = 0.0
grad_weights[2] = -0.43377423
input[3] = -0.8591471
grad_output[3] = 0.0
grad_weights[3] = 0.53118825
input[4] = -0.6834954
grad_output[4] = 0.0
grad_weights[4] = 0.13329685

=== Metal Device Detection ===
• Scanning for compatible Metal devices...
• Using device: Apple M1
  ├─ Recommended max threads per threadgroup: MTLSize(width: 1024, height: 1024, depth: 1024)
  └─ Supports unified memory: Yes

[ERROR] Error Domain=MTLLibraryErrorDomain Code=3 "program_source:34:94: error: no matching function for call to 'atomic_load_explicit'
                            weight_gradient += input[h_in * W * C_in + w_in * C_in + c_in] * atomic_load_explicit(&grad_output[h_out * W_out * C_out + w_out * C_out + c_out], memory_order_relaxed);
                                                                                             ^~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:164:14: note: candidate template ignored: requirement '_valid_load_type<threadgroup float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile threadgroup _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:169:14: note: candidate template ignored: requirement '_valid_load_type<device float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile device _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
program_source:38:17: error: no matching function for call to 'atomic_store_explicit'
                atomic_store_explicit(&grad_weights[thread_position_in_grid.y * K_w * C_in * C_out + thread_position_in_grid.x * C_in * C_out + c_in * C_out + c_out], weight_gradient, memory_order_relaxed);
                ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:26:37: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t c_in = 0; c_in < C_in; c_in = c_in + 1) {
                               ~~~~ ^ ~~~~
program_source:27:43: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
            for (int32_t c_out = 0; c_out < C_out; c_out = c_out + 1) {
                                    ~~~~~ ^ ~~~~~
program_source:29:47: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                for (int32_t h_out = 0; h_out < H_out; h_out = h_out + 1) {
                                        ~~~~~ ^ ~~~~~
program_source:30:51: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                    for (int32_t w_out = 0; w_out < W_out; w_out = w_out + 1) {
                                            ~~~~~ ^ ~~~~~
program_source:33:72: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                        if (h_in >= 0 && h_in < H && w_in >= 0 && w_in < W) {
                                                                  ~~~~ ^ ~
program_source:33:47: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                        if (h_in >= 0 && h_in < H && w_in >= 0 && w_in < W) {
                                         ~~~~ ^ ~
" UserInfo={NSLocalizedDescription=program_source:34:94: error: no matching function for call to 'atomic_load_explicit'
                            weight_gradient += input[h_in * W * C_in + w_in * C_in + c_in] * atomic_load_explicit(&grad_output[h_out * W_out * C_out + w_out * C_out + c_out], memory_order_relaxed);
                                                                                             ^~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:164:14: note: candidate template ignored: requirement '_valid_load_type<threadgroup float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile threadgroup _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:169:14: note: candidate template ignored: requirement '_valid_load_type<device float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile device _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
program_source:38:17: error: no matching function for call to 'atomic_store_explicit'
                atomic_store_explicit(&grad_weights[thread_position_in_grid.y * K_w * C_in * C_out + thread_position_in_grid.x * C_in * C_out + c_in * C_out + c_out], weight_gradient, memory_order_relaxed);
                ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:26:37: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t c_in = 0; c_in < C_in; c_in = c_in + 1) {
                               ~~~~ ^ ~~~~
program_source:27:43: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
            for (int32_t c_out = 0; c_out < C_out; c_out = c_out + 1) {
                                    ~~~~~ ^ ~~~~~
program_source:29:47: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                for (int32_t h_out = 0; h_out < H_out; h_out = h_out + 1) {
                                        ~~~~~ ^ ~~~~~
program_source:30:51: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                    for (int32_t w_out = 0; w_out < W_out; w_out = w_out + 1) {
                                            ~~~~~ ^ ~~~~~
program_source:33:72: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                        if (h_in >= 0 && h_in < H && w_in >= 0 && w_in < W) {
                                                                  ~~~~ ^ ~
program_source:33:47: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
                        if (h_in >= 0 && h_in < H && w_in >= 0 && w_in < W) {
                                         ~~~~ ^ ~
}


[1;35m=== Summary ===[0m
✅ [1;32mSuccessfully completed all operations![0m
