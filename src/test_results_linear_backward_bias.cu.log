    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.15s
     Running `/Users/thomas/Developer/building/cudapple/target/debug/cudapple -i examples/linear_backward_bias.cu -d output --run -v`

[1;36m‚ï∫‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ï∏[0m
[1;33m   CUDApple v1.0.0[0m
[0m   Running CUDA code directly on your Mac chip
[1;36m‚ï∫‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ï∏[0m


[1;35m=== CUDA Source Analysis ===[0m
[1;32mINFO [0m ‚úì Successfully parsed CUDA program with 1 kernels
[1;32mINFO [0m üì¶ Found kernel: linear_backward_bias
[1;32mINFO [0m    ‚îú‚îÄ Parameters: 4
[1;32mINFO [0m üéØ Selected kernel: linear_backward_bias

[1;35m=== Metal Translation ===[0m
[1;32mINFO [0m ‚úì Generated Metal shader code
[1;32mINFO [0m    ‚îú‚îÄ Dimensions: 1
[1;32mINFO [0m    ‚îú‚îÄ Grid size: (2, 1, 1)
[1;32mINFO [0m    ‚îî‚îÄ Thread group size: (256, 1, 1)

[1;35m=== File Generation ===[0m
[1;32mINFO [0m ‚úì Written Metal shader: "output/kernel.metal"
[1;32mINFO [0m ‚úì Written Swift files:
[1;32mINFO [0m    ‚îú‚îÄ "output/MetalKernelRunner.swift"
[1;32mINFO [0m    ‚îî‚îÄ "output/main.swift"

[1;35m=== Kernel Execution ===[0m
[1;32mINFO [0m üöÄ Compiling and running the kernel...
[1;32mINFO [0m ‚úì Successfully compiled Swift code


=== CUDApple Kernel Execution ===
‚Ä¢ Emulating CUDA kernel: linear_backward_bias

=== Input Values ===

grad_output[0] = 1.0
grad_bias[0] = 0.0
grad_output[1] = 1.0
grad_bias[1] = 0.0
grad_output[2] = 1.0
grad_output[3] = 1.0

=== Metal Device Detection ===
‚Ä¢ Scanning for compatible Metal devices...
‚Ä¢ Using device: Apple M1
  ‚îú‚îÄ Recommended max threads per threadgroup: MTLSize(width: 1024, height: 1024, depth: 1024)
  ‚îî‚îÄ Supports unified memory: Yes

[ERROR] Error Domain=MTLLibraryErrorDomain Code=3 "program_source:16:17: error: invalid operands to binary expression ('float' and 'device atomic<float>' (aka 'device _atomic<float>'))
            sum += grad_output[batch_idx * out_features + out_idx];
            ~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1010:32: note: candidate template ignored: cannot deduce a type for 'U' that would make 'device U' equal 'float'
constexpr METAL_FUNC device U &operator+=(device U &u, V v) METAL_ARG_UNIFORM(v, 2)
                               ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1112:37: note: candidate template ignored: cannot deduce a type for 'U' that would make 'threadgroup U' equal 'float'
constexpr METAL_FUNC threadgroup U &operator+=(threadgroup U &u, V v) METAL_ARG_UNIFORM(v, 2)
                                    ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1215:48: note: candidate template ignored: cannot deduce a type for 'U' that would make 'threadgroup_imageblock U' equal 'float'
constexpr METAL_FUNC threadgroup_imageblock U &operator+=(threadgroup_imageblock U &u, V v) METAL_ARG_UNIFORM(v, 2)
                                               ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1319:34: note: candidate template ignored: cannot deduce a type for 'U' that would make 'ray_data U' equal 'float'
constexpr METAL_FUNC ray_data U &operator+=(ray_data U &u, V v) METAL_ARG_UNIFORM(v, 2)
                                 ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:908:32: note: candidate template ignored: requirement 'is_uniform_v<float>' was not satisfied [with U = float, V = metal::_atomic<float>]
constexpr METAL_FUNC thread U &operator+=(thread U &u, V v) METAL_ARG_UNIFORM(v, 2)
                               ^
program_source:18:9: error: no matching function for call to 'atomic_store_explicit'
        atomic_store_explicit(&grad_bias[out_idx], sum, memory_order_relaxed);
        ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:15:47: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t batch_idx = 0; batch_idx < batch_size; batch_idx = batch_idx + 1) {
                                    ~~~~~~~~~ ^ ~~~~~~~~~~
" UserInfo={NSLocalizedDescription=program_source:16:17: error: invalid operands to binary expression ('float' and 'device atomic<float>' (aka 'device _atomic<float>'))
            sum += grad_output[batch_idx * out_features + out_idx];
            ~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1010:32: note: candidate template ignored: cannot deduce a type for 'U' that would make 'device U' equal 'float'
constexpr METAL_FUNC device U &operator+=(device U &u, V v) METAL_ARG_UNIFORM(v, 2)
                               ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1112:37: note: candidate template ignored: cannot deduce a type for 'U' that would make 'threadgroup U' equal 'float'
constexpr METAL_FUNC threadgroup U &operator+=(threadgroup U &u, V v) METAL_ARG_UNIFORM(v, 2)
                                    ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1215:48: note: candidate template ignored: cannot deduce a type for 'U' that would make 'threadgroup_imageblock U' equal 'float'
constexpr METAL_FUNC threadgroup_imageblock U &operator+=(threadgroup_imageblock U &u, V v) METAL_ARG_UNIFORM(v, 2)
                                               ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:1319:34: note: candidate template ignored: cannot deduce a type for 'U' that would make 'ray_data U' equal 'float'
constexpr METAL_FUNC ray_data U &operator+=(ray_data U &u, V v) METAL_ARG_UNIFORM(v, 2)
                                 ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_uniform:908:32: note: candidate template ignored: requirement 'is_uniform_v<float>' was not satisfied [with U = float, V = metal::_atomic<float>]
constexpr METAL_FUNC thread U &operator+=(thread U &u, V v) METAL_ARG_UNIFORM(v, 2)
                               ^
program_source:18:9: error: no matching function for call to 'atomic_store_explicit'
        atomic_store_explicit(&grad_bias[out_idx], sum, memory_order_relaxed);
        ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:15:47: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t batch_idx = 0; batch_idx < batch_size; batch_idx = batch_idx + 1) {
                                    ~~~~~~~~~ ^ ~~~~~~~~~~
}


[1;35m=== Summary ===[0m
‚úÖ [1;32mSuccessfully completed all operations![0m
