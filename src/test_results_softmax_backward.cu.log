    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
     Running `/Users/thomas/Developer/building/cudapple/target/debug/cudapple -i examples/softmax_backward.cu -d output --run -v`

[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m
[1;33m   CUDApple v1.0.0[0m
[0m   Running CUDA code directly on your Mac chip
[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m


[1;35m=== CUDA Source Analysis ===[0m
[1;32mINFO [0m ✓ Successfully parsed CUDA program with 1 kernels
[1;32mINFO [0m 📦 Found kernel: softmax_cross_entropy_backward
[1;32mINFO [0m    ├─ Parameters: 6
[1;32mINFO [0m 🎯 Selected kernel: softmax_cross_entropy_backward

[1;35m=== Metal Translation ===[0m
[1;32mINFO [0m ✓ Generated Metal shader code
[1;32mINFO [0m    ├─ Dimensions: 1
[1;32mINFO [0m    ├─ Grid size: (4096, 1, 1)
[1;32mINFO [0m    └─ Thread group size: (256, 1, 1)

[1;35m=== File Generation ===[0m
[1;32mINFO [0m ✓ Written Metal shader: "output/kernel.metal"
[1;32mINFO [0m ✓ Written Swift files:
[1;32mINFO [0m    ├─ "output/MetalKernelRunner.swift"
[1;32mINFO [0m    └─ "output/main.swift"

[1;35m=== Kernel Execution ===[0m
[1;32mINFO [0m 🚀 Compiling and running the kernel...
[1;32mINFO [0m ✓ Successfully compiled Swift code


=== CUDApple Kernel Execution ===
• Emulating CUDA kernel: softmax_cross_entropy_backward

=== Input Values ===

grad_output[0] = 0.0
predictions[0] = 0.9261402
targets[0] = -0.3106693
grad_input[0] = 0.39552808
grad_output[1] = 0.0
predictions[1] = -0.8899903
targets[1] = -0.12296009
grad_input[1] = 0.59306586
grad_output[2] = 0.0
predictions[2] = 0.2323085
targets[2] = 0.9263902
grad_input[2] = -0.67385113
grad_output[3] = 0.0
predictions[3] = -0.55571175
targets[3] = -0.36728728
grad_input[3] = 0.8786795
grad_output[4] = 0.0
predictions[4] = 0.42800033
targets[4] = -0.1800263
grad_input[4] = -0.6117277

=== Metal Device Detection ===
• Scanning for compatible Metal devices...
• Using device: Apple M1
  ├─ Recommended max threads per threadgroup: MTLSize(width: 1024, height: 1024, depth: 1024)
  └─ Supports unified memory: Yes

[ERROR] Error Domain=MTLLibraryErrorDomain Code=3 "program_source:17:15: error: no viable conversion from 'device atomic<float>' (aka 'device _atomic<float>') to 'float'
        float batch_grad_scale = grad_output[batch_idx];
              ^                  ~~~~~~~~~~~~~~~~~~~~~~
program_source:19:13: error: no matching function for call to 'atomic_store_explicit'
            atomic_store_explicit(&grad_input[offset + batch_idx], (predictions[offset + batch_idx] - targets[offset + batch_idx]) * batch_grad_scale, memory_order_relaxed);
            ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:18:31: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t i = 0; i < num_classes; i = i + 1) {
                            ~ ^ ~~~~~~~~~~~
" UserInfo={NSLocalizedDescription=program_source:17:15: error: no viable conversion from 'device atomic<float>' (aka 'device _atomic<float>') to 'float'
        float batch_grad_scale = grad_output[batch_idx];
              ^                  ~~~~~~~~~~~~~~~~~~~~~~
program_source:19:13: error: no matching function for call to 'atomic_store_explicit'
            atomic_store_explicit(&grad_input[offset + batch_idx], (predictions[offset + batch_idx] - targets[offset + batch_idx]) * batch_grad_scale, memory_order_relaxed);
            ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:18:31: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t i = 0; i < num_classes; i = i + 1) {
                            ~ ^ ~~~~~~~~~~~
}


[1;35m=== Summary ===[0m
✅ [1;32mSuccessfully completed all operations![0m
