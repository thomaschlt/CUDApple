    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
     Running `/Users/thomas/Developer/building/cudapple/target/debug/cudapple -i examples/linear_backward.cu -d output --run -v`

[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m
[1;33m   CUDApple v1.0.0[0m
[0m   Running CUDA code directly on your Mac chip
[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m


[1;35m=== CUDA Source Analysis ===[0m
[1;32mINFO [0m ✓ Successfully parsed CUDA program with 1 kernels
[1;32mINFO [0m 📦 Found kernel: linear_backward_input
[1;32mINFO [0m    ├─ Parameters: 6
[1;32mINFO [0m 🎯 Selected kernel: linear_backward_input

[1;35m=== Metal Translation ===[0m
[1;32mINFO [0m ✓ Generated Metal shader code
[1;32mINFO [0m    ├─ Dimensions: 2
[1;32mINFO [0m    ├─ Grid size: (63, 63, 1)
[1;32mINFO [0m    └─ Thread group size: (16, 16, 1)

[1;35m=== File Generation ===[0m
[1;32mINFO [0m ✓ Written Metal shader: "output/kernel.metal"
[1;32mINFO [0m ✓ Written Swift files:
[1;32mINFO [0m    ├─ "output/MetalKernelRunner.swift"
[1;32mINFO [0m    └─ "output/main.swift"

[1;35m=== Kernel Execution ===[0m
[1;32mINFO [0m 🚀 Compiling and running the kernel...
[1;32mINFO [0m ✓ Successfully compiled Swift code


=== CUDApple Kernel Execution ===
• Emulating CUDA kernel: linear_backward_input

=== Input Values ===

grad_output[0] = 1.0
weights[0] = 0.1
grad_input[0] = 0.0
grad_output[1] = 1.0
weights[1] = 0.2
grad_input[1] = 0.0
grad_output[2] = 1.0
weights[2] = 0.3
grad_input[2] = 0.0
grad_output[3] = 1.0
weights[3] = 0.4
grad_input[3] = 0.0
weights[4] = 0.5
grad_input[4] = 0.0

=== Metal Device Detection ===
• Scanning for compatible Metal devices...
• Using device: Apple M1
  ├─ Recommended max threads per threadgroup: MTLSize(width: 1024, height: 1024, depth: 1024)
  └─ Supports unified memory: Yes

[ERROR] Error Domain=MTLLibraryErrorDomain Code=3 "program_source:19:20: error: no matching function for call to 'atomic_load_explicit'
            sum += atomic_load_explicit(&grad_output[batch_idx * out_features + out_idx], memory_order_relaxed) * weights[in_idx * out_features + out_idx];
                   ^~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:164:14: note: candidate template ignored: requirement '_valid_load_type<threadgroup float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile threadgroup _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:169:14: note: candidate template ignored: requirement '_valid_load_type<device float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile device _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
program_source:21:9: error: no matching function for call to 'atomic_store_explicit'
        atomic_store_explicit(&grad_input[batch_idx * in_features + in_idx], sum, memory_order_relaxed);
        ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:16:42: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
    if (batch_idx < batch_size && in_idx < in_features) {
                                  ~~~~~~ ^ ~~~~~~~~~~~
program_source:16:19: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
    if (batch_idx < batch_size && in_idx < in_features) {
        ~~~~~~~~~ ^ ~~~~~~~~~~
program_source:18:43: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t out_idx = 0; out_idx < out_features; out_idx = out_idx + 1) {
                                  ~~~~~~~ ^ ~~~~~~~~~~~~
" UserInfo={NSLocalizedDescription=program_source:19:20: error: no matching function for call to 'atomic_load_explicit'
            sum += atomic_load_explicit(&grad_output[batch_idx * out_features + out_idx], memory_order_relaxed) * weights[in_idx * out_features + out_idx];
                   ^~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:164:14: note: candidate template ignored: requirement '_valid_load_type<threadgroup float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile threadgroup _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:169:14: note: candidate template ignored: requirement '_valid_load_type<device float *, void>::value' was not satisfied [with T = float]
METAL_FUNC T atomic_load_explicit(const volatile device _atomic<T> *object, memory_order order) METAL_CONST_ARG(order) METAL_VALID_LOAD_ORDER(order)
             ^
program_source:21:9: error: no matching function for call to 'atomic_store_explicit'
        atomic_store_explicit(&grad_input[batch_idx * in_features + in_idx], sum, memory_order_relaxed);
        ^~~~~~~~~~~~~~~~~~~~~
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:122:17: note: candidate template ignored: requirement '_valid_store_type<threadgroup float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile threadgroup _atomic<T> * object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
/System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/32023/Libraries/lib/clang/32023.196/include/metal/metal_atomic:127:17: note: candidate template ignored: requirement '_valid_store_type<device float *, void>::value' was not satisfied [with T = float, U = float]
METAL_FUNC void atomic_store_explicit(volatile device _atomic<T> *object, U desired, memory_order order) METAL_CONST_ARG(order) METAL_VALID_STORE_ORDER(order)
                ^
program_source:16:42: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
    if (batch_idx < batch_size && in_idx < in_features) {
                                  ~~~~~~ ^ ~~~~~~~~~~~
program_source:16:19: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
    if (batch_idx < batch_size && in_idx < in_features) {
        ~~~~~~~~~ ^ ~~~~~~~~~~
program_source:18:43: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'const constant uint' (aka 'const constant unsigned int') [-Wsign-compare]
        for (int32_t out_idx = 0; out_idx < out_features; out_idx = out_idx + 1) {
                                  ~~~~~~~ ^ ~~~~~~~~~~~~
}


[1;35m=== Summary ===[0m
✅ [1;32mSuccessfully completed all operations![0m
