    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
     Running `/Users/thomas/Developer/building/cudapple/target/debug/cudapple -i examples/sgd_optimizer.cu -d output --run -v`

[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m
[1;33m   CUDApple v1.0.0[0m
[0m   Running CUDA code directly on your Mac chip
[1;36m╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸[0m


[1;35m=== CUDA Source Analysis ===[0m
[1;32mINFO [0m ✓ Successfully parsed CUDA program with 1 kernels
[1;32mINFO [0m 📦 Found kernel: sgd_optimizer
[1;32mINFO [0m    ├─ Parameters: 4
[1;32mINFO [0m 🎯 Selected kernel: sgd_optimizer

[1;35m=== Metal Translation ===[0m
[1;32mINFO [0m ✓ Generated Metal shader code
[1;32mINFO [0m    ├─ Dimensions: 1
[1;32mINFO [0m    ├─ Grid size: (4, 1, 1)
[1;32mINFO [0m    └─ Thread group size: (256, 1, 1)

[1;35m=== File Generation ===[0m
[1;32mINFO [0m ✓ Written Metal shader: "output/kernel.metal"
[1;32mINFO [0m ✓ Written Swift files:
[1;32mINFO [0m    ├─ "output/MetalKernelRunner.swift"
[1;32mINFO [0m    └─ "output/main.swift"

[1;35m=== Kernel Execution ===[0m
[1;32mINFO [0m 🚀 Compiling and running the kernel...
[1;32mINFO [0m ✓ Successfully compiled Swift code


=== CUDApple Kernel Execution ===
• Emulating CUDA kernel: sgd_optimizer

=== Input Values ===

weights[0] = -0.098893285
grad_weights[0] = -0.0037309146
lr[0] = 0.01
weights[1] = -0.006342292
grad_weights[1] = -0.009647324
weights[2] = -0.041752733
grad_weights[2] = 0.0056120064
weights[3] = 0.022310793
grad_weights[3] = 0.008623155
weights[4] = -0.07136373
grad_weights[4] = -0.0030722357

=== Metal Device Detection ===
• Scanning for compatible Metal devices...
• Using device: Apple M1
  ├─ Recommended max threads per threadgroup: MTLSize(width: 1024, height: 1024, depth: 1024)
  └─ Supports unified memory: Yes

• Allocating buffer 0
  ├─ Elements: 1000
  └─ Size: 4000 bytes
• Successfully allocated buffer 0

• Allocating buffer 1
  ├─ Elements: 1000
  └─ Size: 4000 bytes
• Successfully allocated buffer 1

• Allocating buffer 2
  ├─ Elements: 1
  └─ Size: 4 bytes
• Successfully allocated buffer 2

=== Buffer Contents Before Kernel Execution ===
Buffer 0 first 5 elements:
  [0]: -0.098893285
  [1]: -0.006342292
  [2]: -0.041752733
  [3]: 0.022310793
  [4]: -0.07136373
Buffer 1 first 5 elements:
  [0]: -0.0037309146
  [1]: -0.009647324
  [2]: 0.0056120064
  [3]: 0.008623155
  [4]: -0.0030722357
Buffer 2 (UInt32): 1008981770
Buffer 3 (UInt32): 1000

=== Kernel Configuration ===
Grid Size: MTLSize(width: 4, height: 1, depth: 1)
Thread Group Size: MTLSize(width: 256, height: 1, depth: 1)
Problem Size: 1000
Total Threads: 1024

=== Buffer Contents After Kernel Execution ===
Buffer 0 first 5 elements:
  [0]: -0.09885597
  [1]: -0.0062458185
  [2]: -0.041808855
  [3]: 0.022224562
  [4]: -0.07133301
Buffer 1 first 5 elements:
  [0]: -0.0037309146
  [1]: -0.009647324
  [2]: 0.0056120064
  [3]: 0.008623155
  [4]: -0.0030722357
Buffer 2 (UInt32): 1008981770
Buffer 3 (UInt32): 1000
• Kernel execution completed in 1.185ms

=== Results ===
• First 5 output values:
  [0]: -0.09885597
  [1]: -0.0062458185
  [2]: -0.041808855
  [3]: 0.022224562
  [4]: -0.07133301


[1;35m=== Summary ===[0m
✅ [1;32mSuccessfully completed all operations![0m
